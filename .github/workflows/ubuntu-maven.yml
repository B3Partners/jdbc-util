name: Maven build

on:
  push:
  pull_request:

concurrency: # cancel on PR pushes
  # More info: https://stackoverflow.com/a/68422069/253468
  group: ${{ github.workflow }}-${{ ( github.ref == 'refs/heads/master' || github.ref == 'refs/heads/release' ) && format('ci-master-{0}', github.sha) || format('ci-master-{0}', github.ref) }}
  cancel-in-progress: true

env:
  PGPASSWORD: postgres
  PGUSER: postgres
  PGDATABASE: postgres

jobs:
  build:
    name: Java ${{ matrix.java }} / ${{ matrix.profile }} / PostGIS ${{ matrix.postgis }} build
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        java: [ 11 ]
        java_dist: [ 'temurin' ]
        profile: [ hsqldb,  postgresql ]
        postgis: [ 15-3.3-alpine ]

    services:
      postgis:
        image: postgis/postgis:${{ matrix.postgis }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 15s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 5
      - uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-
      - name: Set up JDK for build
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }}
          distribution: ${{ matrix.java_dist }}

      - name: Set up PostGIS database
        if: ${{ matrix.profile == 'postgresql' }}
        run: |
          psql --version
          psql -U postgres -h localhost -c 'SELECT version();'
          .build/ci/pgsql-setup.sh

      - name: Priming build
        run: mvn install -Dmaven.test.skip=true -B -V -e -fae -q -P${{ matrix.profile }}

      - name: Test
        run: mvn -e test -B -P${{ matrix.profile }}

      - name: Verify
        run: mvn -e verify -B -P${{ matrix.profile }} -T1 -Dtest.onlyITs=true

      - name: Javadoc
        run: |
          mvn javadoc:javadoc
          mvn javadoc:test-javadoc

      - name: Upload codecoverage
        uses: codecov/codecov-action@v3


  deploy:
    name: Deploy artifacts
    runs-on: ubuntu-latest
    needs: build
    permissions:
      packages: write
      contents: read
    if: ${{ github.ref == 'refs/heads/master' && ( github.event_name == 'push' || github.event_name == 'workflow_dispatch' ) }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'temurin'

      - name: Build and Push
        # no need to run any QC or tests
        env:
          B3P_DEPLOY_ACTOR: ${{ secrets.B3P_DEPLOY_ACTOR }}
          B3P_DEPLOY_TOKEN: ${{ secrets.B3P_DEPLOY_TOKEN }}
        run: |
          mvn -B -V -fae -Dmaven.test.skip=true clean deploy --settings .github/maven-settings.xml

      - name: 'Deploy SBOM'
        uses: DependencyTrack/gh-upload-sbom@master
        with:
          serverhostname: ${{ secrets.DEPENDENCY_TRACK_HOSTNAME }}
          apikey: ${{ secrets.DEPENDENCY_TRACK_APIKEY }}
          project: 'd3442453-6841-4f80-9908-af8d7cc112f0'
          bomfilename: 'target/bom.xml'


  cleanup:
    name: Maven cache cleanup
    if: ${{ always() }}
    needs: [ build, deploy ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-

      - name: Cleanup snapshot cache
        run: |
          find ~/.m2/repository -name "*SNAPSHOT*" -type d | xargs rm -rf {}
